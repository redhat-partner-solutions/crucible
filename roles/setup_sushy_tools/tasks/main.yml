### SUSHY-TOOLS
- name: Install sushy-tools
  become: true
  block:
    - name: Install sushy-tools via pip3
      pip:
        name: "sushy-tools"

    - name: Install httpd-tools for htpasswd
      package:
        name: httpd-tools
        state: present

    - name: Add TCP firewall rules for BM bridge
      firewalld:
        port: "{{ item.0 }}/tcp"
        state: enabled
        zone: "{{ item.1 }}"
        permanent: yes
        immediate: yes
      loop: "{{ [sushy_tools_port] | product(['internal', 'public']) | list }}"

    - name: "Create sushy-tools conf directory {{ item }}"
      file:
        path: "{{ item }}"
        state: directory
        mode: 0755
      loop:
        - "{{ sushy_dir }}"
        - "{{ sushy_auth_dir }}"
        - "{{ sushy_cert_dir }}"

    - name: Secure sushy tools
      when: secure_sushy_tools | bool
      block:
        - name: Get KVM BMC username password combinations
          vars:
            user_password_combinations: {}
          set_fact:
            user_password_combinations: "{{
              user_password_combinations | combine({hostvars[item]['bmc_user']: hostvars[item]['bmc_password']})
              }}"
          when: hostvars[item]['vendor'] == 'KVM'
          loop: "{{ groups['nodes'] }}"

        - name: Generate htpasswd entry
          command: htpasswd -bBn {{ item.user }} {{ item.password }}
          register: htpass_entries
          changed_when: false
          loop: "{{ user_password_combinations | dict2items(key_name='user', value_name='password') }}"

        - name: Write htpasswd file
          copy:
            content: "{{ htpass_entries.results | map(attribute='stdout') | join('\n') }}"
            dest: "{{ sushy_auth_file }}"
            owner: "{{ file_owner }}"
            group: "{{ file_group }}"
            mode: 0660
            backup: yes
            force: yes
          become: True

        - include_role:
            name: setup_selfsigned_cert
          vars:
            cert_dir: "{{ sushy_cert_dir }}"
            host_var_key: "{{ cert_vars_host_var_key }}"
            cert_file_prefix: sushy_tools
            cert_path: "{{ sushy_cert_dir }}/sushy_tools_{{ inventory_hostname }}.crt"
            privatekey_path: "{{ sushy_cert_dir }}/sushy_tools.key"
            cert_common_name: "{{ ansible_fqdn }}"

    - name: Create sushy-tools conf
      template:
        src: sushy-emulator.conf.j2
        dest: "{{ sushy_dir }}/sushy-emulator.conf"
        mode: 0664

    - name: Create sushy-tools service
      template:
        src: sushy-tools.service.j2
        dest: /etc/systemd/system/sushy-tools.service
        mode: 0664

    - name: Reload systemd service
      systemd:
        daemon_reexec: yes

    - name: Start sushy-tools service
      service:
        name: sushy-tools
        state: restarted
        enabled: yes
