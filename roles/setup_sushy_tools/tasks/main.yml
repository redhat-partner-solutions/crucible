### SUSHY-TOOLS
- name: Install sushy-tools
  become: true
  block:
    - name: Install required packages
      ansible.builtin.package:
        name: "{{ sushy_packages }}"
        state: present

    - name: "Create sushy-tools directory {{ item }}"
      ansible.builtin.file:
        path: "{{ item }}"
        state: directory
        mode: 0755
      loop:
        - "{{ sushy_dir }}"
        - "{{ sushy_auth_dir }}"
        - "{{ sushy_cert_dir }}"
        - "{{ sushy_data_dir }}"

    - name: Install sushy-tools via pip in a virtual environment
      ansible.builtin.pip:
        name: "{{ sushy_pip_packages }}"
        virtualenv: "{{ sushy_dir }}"

    - name: Install httpd-tools for htpasswd
      ansible.builtin.package:
        name: httpd-tools
        state: present

    - name: Add TCP firewall rules for BM bridge
      ansible.posix.firewalld:
        port: "{{ item.0 }}/tcp"
        state: enabled
        zone: "{{ item.1 }}"
        permanent: true
        immediate: true
      loop: "{{ [sushy_tools_port] | product(['internal', 'public']) | list }}"

    - name: Secure sushy tools
      when: secure_sushy_tools | bool
      block:
        - name: Get KVM BMC username password combinations
          vars:
            user_password_combinations: {}
          ansible.builtin.set_fact:
            user_password_combinations: "{{
              user_password_combinations | combine({hostvars[item]['bmc_user']: hostvars[item]['bmc_password']})
              }}"
          when: hostvars[item]['vendor'] | lower == 'kvm'
          loop: "{{ groups['nodes'] }}"
          no_log: true

        - name: Generate htpasswd entry
          ansible.builtin.command: htpasswd -bBn {{ item.user }} {{ item.password }}
          register: htpass_entries
          changed_when: false
          loop: "{{ user_password_combinations | dict2items(key_name='user', value_name='password') }}"

        - name: Write htpasswd file
          ansible.builtin.copy:
            content: "{{ htpass_entries.results | map(attribute='stdout') | join('\n') }}"
            dest: "{{ sushy_auth_file }}"
            owner: "{{ file_owner }}"
            group: "{{ file_group }}"
            mode: 0660
            backup: true
            force: true
          become: true

        - name: Generate self signed cert for sushy tools.
          ansible.builtin.include_role:
            name: setup_selfsigned_cert
          vars:
            cert_dir: "{{ sushy_cert_dir }}"
            host_var_key: "{{ cert_vars_host_var_key }}"
            cert_file_prefix: sushy_tools
            cert_path: "{{ sushy_cert_dir }}/sushy_tools_{{ inventory_hostname }}.crt"
            privatekey_path: "{{ sushy_cert_dir }}/sushy_tools.key"
            cert_common_name: "{{ sushy_fqdn }}"

    - name: Set X86_64 OVMF code path
      ansible.builtin.set_fact:
        sushy_x86_64_ovmf_code_path: "/usr/share/edk2/ovmf/OVMF_CODE.secboot.fd"

    - name: Check x86_64 OVMF code path
      ansible.builtin.stat:
        path: "/usr/share/OVMF/OVMF_CODE.secboot.fd"
      register: OVMF_X86_64_CODE_STAT

    - name: Set x86_64 OVMF code path (legacy)
      ansible.builtin.set_fact:
        sushy_x86_64_ovmf_code_path: "/usr/share/OVMF/OVMF_CODE.secboot.fd"
      when:
        - OVMF_X86_64_CODE_STAT.stat.exists
        - not OVMF_X86_64_CODE_STAT.stat.islnk

    - name: Create sushy-tools conf
      ansible.builtin.template:
        src: sushy-emulator.conf.j2
        dest: "{{ sushy_dir }}/sushy-emulator.conf"
        mode: 0664

    - name: Create sushy-tools service
      ansible.builtin.template:
        src: sushy-tools.service.j2
        dest: /etc/systemd/system/sushy-tools.service
        mode: 0664

    - name: Reload systemd service
      ansible.builtin.systemd:
        daemon_reexec: true

    - name: Start sushy-tools service
      ansible.builtin.service:
        name: sushy-tools
        state: restarted
        enabled: true
