---
# tasks file for install_cluster/hosts_discovery

- name: Ensure host has inventory
  when: discovered_host.inventory is not defined
  block:
    - name: "Wait for up to 10 minutes for node discovery - {{ discovered_host.id }}"
      uri:
        url: "{{ URL_ASSISTED_INSTALLER_INFRA_ENV }}/hosts/{{ discovered_host.id }}"
        method: GET
        status_code: [200, 201]
        return_content: True
      register: host
      until: host.json.inventory is defined
      retries: 10
      delay: 60

    - name: Identify the discovered host {{ discovered_host.id }}
      set_fact:
        host: "{{ host.json }}"

- name: Identify the discovered host {{ discovered_host.id }}
  set_fact:
    host: "{{ discovered_host }}"
  when: discovered_host.inventory is defined

- name: Get inventory hostname for {{ discovered_host.id }}
  vars:
    host_mac_addresses: "{{
        (host.inventory | from_json).interfaces | map(attribute='mac_address') | map('upper') | list
      }}"
  set_fact:
    inv_hostname: "{{ item }}"
  when: hostvars[item]['mac'] is defined and (hostvars[item]['mac'] | upper) in host_mac_addresses
  loop: "{{ groups['nodes'] }}"
  no_log: True

- name: Fail if mac address match not found
  fail:
    msg: "Inventory node not fround for {{ host.id }}: {{ host.requested_hostname }}"
  when: inv_hostname is not defined

- name: Set patch body with hostname
  set_fact:
    patch_host_body:
      host_name: "{{ inv_hostname }}"

- name: Set role in patch body
  set_fact:
    patch_host_body: "{{ patch_host_body | combine({'host_role': hostvars[inv_hostname]['role'] }) }}"
  when: not single_node_openshift_enabled

- name: Set the installation disk path
  when: hostvars[inv_hostname]['installation_disk_path'] is defined
  block:
    - name: Fetch the installation disk path from host vars
      set_fact:
        installation_disk_path: "{{ hostvars[inv_hostname]['installation_disk_path'] }}"

    - name: "Add installation disk of {{ installation_disk_path }} patch body for {{ inv_hostname }}"
      set_fact:
        patch_host_body: "{{ patch_host_body | combine({
              'disks_selected_config': [
                {
                  'id': installation_disk_path,
                  'role': 'install'
                }
              ]
            })
          }}"

- name: Set the installation disk path
  when: hostvars[inv_hostname]['openshift_labels'] is defined
  set_fact:
    patch_host_body: "{{ patch_host_body | combine({
          'node_labels': (hostvars[inv_hostname]['openshift_labels'] |  dict2items | list)
        })
      }}"

- name: "Patch host {{ host_name }}"
  uri:
    url: "{{ URL_ASSISTED_INSTALLER_INFRA_ENV }}/hosts/{{ host.id }}"
    method: PATCH
    url_username: "{{ HTTP_AUTH_USERNAME }}"
    url_password: "{{ HTTP_AUTH_PASSWORD }}"
    body_format: json
    status_code: [201]
    return_content: True
    body: "{{ patch_host_body | to_json(ensure_ascii=False) | string }}"
  register: http_reply

- name: Load patch for worker partition
  when: hostvars[inv_hostname]['disks'] is defined
  vars:
    disks: "{{ hostvars[inv_hostname]['disks'] }}"
  block:
    - name: Template patch partition
      set_fact:
        worker_partition: "{{ lookup('template', 'patch-worker-partition.j2') }}"

    - debug: # noqa unnamed-task
        var: worker_partition
        verbosity: 1

    - name: Patch worker partition
      uri:
        url: "{{ URL_ASSISTED_INSTALLER_INFRA_ENV }}/hosts/{{ host_id }}/ignition"
        method: PATCH
        status_code: [201]
        return_content: True
        body_format: json
        body: { "config": "{{ worker_partition | to_json(ensure_ascii=False) | string }}" }
      register: http_reply

    - debug: # noqa unnamed-task
        var: http_reply
        verbosity: 1
