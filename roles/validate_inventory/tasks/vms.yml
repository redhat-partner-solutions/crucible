- name: Get all KVM Nodes
  vars:
    kvm_node_names: []
  set_fact:
    kvm_node_names: "{{ kvm_node_names + [item] }}"
  when: hostvars[item]['vendor'] | lower == 'kvm'
  loop: "{{ groups['nodes'] }}"

- name: Check there is no vm_host in services
  assert:
    that:
      - ('vm_host' not in groups['services'])
    fail_msg: >
      The structure of the inventory has changed
      please put vm_host into a group called vm_hosts
      and add a vm_host entry to the KVM node to point
      to the host of the vm.

- name: Check that a host is defined in the 'vm_hosts' group if needed
  assert:
    that:
      - groups['vm_hosts'] is defined
      - groups['vm_hosts'] | length > 0
    quiet: true
  when: (kvm_node_names is defined) and (kvm_node_names | length > 0)

- name: Check that each node will be on a valid host
  assert:
    that:
      - hostvars[item]['vm_host'] in groups['vm_hosts']
    quiet: true
    fail_msg: "vm_host ({{ hostvars[item]['vm_host'] }}) for {{ item }} not found in group vm_hosts"
  loop: "{{ kvm_node_names | default([]) }}"

- name: Check KVM BMC username password combinations
  when: (kvm_node_names is defined) and (kvm_node_names | length > 0)
  block:
    - name: Get KVM BMC username password combinations
      vars:
        kvm_user_password_combinations: {} # Structure will be {'{{vm_host}}.{{bmc_user}}': [{{bmc_password}}, ...]}
      set_fact:
        kvm_user_password_combinations: "{{
            kvm_user_password_combinations | combine({
              (hostvars[item]['vm_host'] + '.' + hostvars[item]['bmc_user']): (
                (
                  kvm_user_password_combinations[(
                    hostvars[item]['vm_host'] + '.' + hostvars[item]['bmc_user']
                  )] | default([])
                ) + [hostvars[item]['bmc_password']]
              ) | unique
            })
          }}"
      loop: "{{ kvm_node_names }}"
      no_log: true

    - name: Check there are not mutliple bmc passwords for the same bmc user and vm host.
      assert:
        that:
          - (item.value | length) == 1
        fail_msg: |
          For vm host {{ item.key.split('.')[0] }}: bmc_user ({{ item.key.split('.')[1] }})
          and bmc_password combinations for a single host must be unique
      loop: "{{ kvm_user_password_combinations | dict2items() }}"
      no_log: true

- name: Check UUIDs are unique
  when: (kvm_node_names is defined) and (kvm_node_names | length > 0)
  vars:
    kvm_node_uuids: []
  block:
    - name: Get node UUIDs
      set_fact:
        kvm_node_uuids: "{{ kvm_node_uuids + [hostvars[item]['uuid']] }}"
      when: "'uuid' in hostvars[item]"
      loop: "{{ kvm_node_names }}"
      no_log: true

    - name: Check values are unique
      assert:
        that:
          - (kvm_node_uuids | length) == (kvm_node_uuids | unique | length)
        fail_msg: "KVM node UUIDs must be unique otherwise they won't build or will collide during discovery"
