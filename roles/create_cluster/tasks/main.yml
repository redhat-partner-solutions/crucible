---
# tasks file for create_cluster

- name: Set body for create cluster
  set_fact:
    # - `ingress_vip` is not provided in the request body because the value
    #   can't be set for SNO with user-managed networking enabled.
    #   HA clusters will be patched with the `ingress_vip` setting during
    #   the execution of the `install_cluster` role.
    # - the request body is wrapped in a jinja2 expression with the `to_json`
    #   filter to prevent the `cluster_network_host_prefix` value from being
    #   type casted to a string. The Assisted Installer API requires this
    #   input field to be an integer.
    create_body: '{{
        {
          "name": cluster_name,
          "high_availability_mode": (high_availability_mode | title),
          "openshift_version": (openshift_version | string),
          "base_dns_domain": base_dns_domain,
          "cluster_network_cidr": cluster_network_cidr,
          "cluster_network_host_prefix": (cluster_network_host_prefix | int),
          "service_network_cidr": service_network_cidr,
          "pull_secret": (pull_secret | to_json),
          "ssh_public_key": ssh_public_key,
          "vip_dhcp_allocation": (vip_dhcp_allocation | lower | bool),
          "http_proxy": http_proxy,
          "https_proxy": https_proxy,
          "no_proxy": no_proxy,
          "additional_ntp_source": ntp_server,
        } | to_json
      }}'

- name: Assign api_vip and ingress_vip of not doing SNO
  set_fact:
    create_body_extras: "{{ create_body_extras | combine({
        'api_vip': api_vip,
        'ingress_vip': ingress_vip,
      }) }}"
  when: not (single_node_openshift_enabled | bool)

- name: Assign schedulable_masters if cluster has workers
  set_fact:
    create_body_extras: "{{ create_body_extras | combine({'schedulable_masters': schedulable_masters }) }}"
  when: has_workers | bool

- name: Add network_type to extras for create_body
  set_fact:
    create_body_extras: "{{ create_body_extras | combine({'network_type': network_type }) }}"
  when: network_type is defined

- name: Add LSO to olm_operators
  set_fact:
    olm_operators: "{{ (olm_operators | default([])) + [{'name': 'lso'}] }}"
  when: ((install_odf | default(false)) | bool) or ((install_lso | default(false)) | bool)

- name: Add OCS to olm_operators
  set_fact:
    olm_operators: "{{ (olm_operators | default([])) + [{'name': 'ocs'}] }}"
  when: ((install_odf | default(false)) | bool)

- name: Add CNV to olm_operators
  set_fact:
    olm_operators: "{{ (olm_operators | default([])) + [{'name': 'cnv'}] }}"
  when: ((install_cnv | default(false)) | bool)

- name: Add Operators
  set_fact:
    create_body_extras: "{{ create_body_extras | combine({'olm_operators': olm_operators}) }}"
  when: olm_operators is defined

- debug: # noqa unnamed-task
    msg: "{{ create_body | from_json | combine(create_body_extras) | to_nice_json }}"
    verbosity: 1

- name: Create cluster
  uri:
    url: "{{ URL_ASSISTED_INSTALLER_CLUSTERS }}"
    method: POST
    url_username: "{{ HTTP_AUTH_USERNAME }}"
    url_password: "{{ HTTP_AUTH_PASSWORD }}"
    body_format: json
    status_code: [201]
    return_content: True
    body: "{{ create_body | from_json | combine(create_body_extras) | to_json }}"
  when: create | bool == True
  register: http_reply

- debug: # noqa unnamed-task
    var: http_reply.json
    verbosity: 1
  when: create | bool == True

- name: "Make sure {{ fetched_dest }} exists"
  file:
    path: "{{ fetched_dest }}"
    state: directory
    recurse: yes
  delegate_to: localhost
  become: no

- name: Set the cluster ID
  set_fact:
    cluster_id: "{{ http_reply.json.id }}"
  when: create | bool == True

- name: "Save cluster_id"
  copy:
    content: "{{ cluster_id }}"
    dest: "{{ fetched_dest }}/{{ cluster_id_filename }}"
    mode: 0644
  delegate_to: localhost
  become: no
  when: create | bool == True
